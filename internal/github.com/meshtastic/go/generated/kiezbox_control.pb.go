// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.2
// source: meshtastic/kiezbox_control.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Modes a kiezbox can be in
type KiezboxMessage_Mode int32

const (
	KiezboxMessage_maintenance KiezboxMessage_Mode = 0
	KiezboxMessage_normal      KiezboxMessage_Mode = 1
	KiezboxMessage_emergency   KiezboxMessage_Mode = 2
)

// Enum value maps for KiezboxMessage_Mode.
var (
	KiezboxMessage_Mode_name = map[int32]string{
		0: "maintenance",
		1: "normal",
		2: "emergency",
	}
	KiezboxMessage_Mode_value = map[string]int32{
		"maintenance": 0,
		"normal":      1,
		"emergency":   2,
	}
)

func (x KiezboxMessage_Mode) Enum() *KiezboxMessage_Mode {
	p := new(KiezboxMessage_Mode)
	*p = x
	return p
}

func (x KiezboxMessage_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KiezboxMessage_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_kiezbox_control_proto_enumTypes[0].Descriptor()
}

func (KiezboxMessage_Mode) Type() protoreflect.EnumType {
	return &file_meshtastic_kiezbox_control_proto_enumTypes[0]
}

func (x KiezboxMessage_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KiezboxMessage_Mode.Descriptor instead.
func (KiezboxMessage_Mode) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 0}
}

// Device Type of the kiezbox
type KiezboxMessage_DeviceType int32

const (
	// A core control module
	KiezboxMessage_core KiezboxMessage_DeviceType = 0
	// A dedicated sensor box
	KiezboxMessage_sensor KiezboxMessage_DeviceType = 1
	// A info dipslay
	KiezboxMessage_display KiezboxMessage_DeviceType = 2
)

// Enum value maps for KiezboxMessage_DeviceType.
var (
	KiezboxMessage_DeviceType_name = map[int32]string{
		0: "core",
		1: "sensor",
		2: "display",
	}
	KiezboxMessage_DeviceType_value = map[string]int32{
		"core":    0,
		"sensor":  1,
		"display": 2,
	}
)

func (x KiezboxMessage_DeviceType) Enum() *KiezboxMessage_DeviceType {
	p := new(KiezboxMessage_DeviceType)
	*p = x
	return p
}

func (x KiezboxMessage_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KiezboxMessage_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_kiezbox_control_proto_enumTypes[1].Descriptor()
}

func (KiezboxMessage_DeviceType) Type() protoreflect.EnumType {
	return &file_meshtastic_kiezbox_control_proto_enumTypes[1]
}

func (x KiezboxMessage_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KiezboxMessage_DeviceType.Descriptor instead.
func (KiezboxMessage_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 1}
}

type KiezboxMessage_Request_Type int32

const (
	KiezboxMessage_Request_Update KiezboxMessage_Request_Type = 0
)

// Enum value maps for KiezboxMessage_Request_Type.
var (
	KiezboxMessage_Request_Type_name = map[int32]string{
		0: "Update",
	}
	KiezboxMessage_Request_Type_value = map[string]int32{
		"Update": 0,
	}
)

func (x KiezboxMessage_Request_Type) Enum() *KiezboxMessage_Request_Type {
	p := new(KiezboxMessage_Request_Type)
	*p = x
	return p
}

func (x KiezboxMessage_Request_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KiezboxMessage_Request_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_kiezbox_control_proto_enumTypes[2].Descriptor()
}

func (KiezboxMessage_Request_Type) Type() protoreflect.EnumType {
	return &file_meshtastic_kiezbox_control_proto_enumTypes[2]
}

func (x KiezboxMessage_Request_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KiezboxMessage_Request_Type.Descriptor instead.
func (KiezboxMessage_Request_Type) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 1, 0}
}

// This message is used for
// KIEZBOX_CONTROL_APP PortNums.
type KiezboxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update  *KiezboxMessage_Update  `protobuf:"bytes,4,opt,name=update,proto3,oneof" json:"update,omitempty"`
	Control *KiezboxMessage_Control `protobuf:"bytes,5,opt,name=control,proto3,oneof" json:"control,omitempty"`
}

func (x *KiezboxMessage) Reset() {
	*x = KiezboxMessage{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage) ProtoMessage() {}

func (x *KiezboxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage.ProtoReflect.Descriptor instead.
func (*KiezboxMessage) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0}
}

func (x *KiezboxMessage) GetUpdate() *KiezboxMessage_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *KiezboxMessage) GetControl() *KiezboxMessage_Control {
	if x != nil {
		return x.Control
	}
	return nil
}

// Meta information identifying the box
// Also used as tags in the Database
type KiezboxMessage_Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID if the Kiezbox
	BoxId *uint32 `protobuf:"varint,1,opt,name=box_id,json=boxId,proto3,oneof" json:"box_id,omitempty"` // only 8 bit used
	// ID of the district the box is assigned to
	DistId *uint32 `protobuf:"varint,2,opt,name=dist_id,json=distId,proto3,oneof" json:"dist_id,omitempty"` // only 8 bit used
	// ID of the sensor if this is a sensor module
	SensId *uint32 `protobuf:"varint,3,opt,name=sens_id,json=sensId,proto3,oneof" json:"sens_id,omitempty"`
	// Which type of device the controller should be
	DevType *KiezboxMessage_DeviceType `protobuf:"varint,4,opt,name=dev_type,json=devType,proto3,enum=meshtastic.KiezboxMessage_DeviceType,oneof" json:"dev_type,omitempty"`
}

func (x *KiezboxMessage_Meta) Reset() {
	*x = KiezboxMessage_Meta{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_Meta) ProtoMessage() {}

func (x *KiezboxMessage_Meta) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_Meta.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_Meta) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 0}
}

func (x *KiezboxMessage_Meta) GetBoxId() uint32 {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return 0
}

func (x *KiezboxMessage_Meta) GetDistId() uint32 {
	if x != nil && x.DistId != nil {
		return *x.DistId
	}
	return 0
}

func (x *KiezboxMessage_Meta) GetSensId() uint32 {
	if x != nil && x.SensId != nil {
		return *x.SensId
	}
	return 0
}

func (x *KiezboxMessage_Meta) GetDevType() KiezboxMessage_DeviceType {
	if x != nil && x.DevType != nil {
		return *x.DevType
	}
	return KiezboxMessage_core
}

// Message to control one or multiple boxes
type KiezboxMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *KiezboxMessage_Meta         `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Type *KiezboxMessage_Request_Type `protobuf:"varint,2,opt,name=type,proto3,enum=meshtastic.KiezboxMessage_Request_Type,oneof" json:"type,omitempty"`
}

func (x *KiezboxMessage_Request) Reset() {
	*x = KiezboxMessage_Request{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_Request) ProtoMessage() {}

func (x *KiezboxMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_Request.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_Request) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 1}
}

func (x *KiezboxMessage_Request) GetMeta() *KiezboxMessage_Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *KiezboxMessage_Request) GetType() KiezboxMessage_Request_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return KiezboxMessage_Request_Update
}

type KiezboxMessage_Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Set:
	//
	//	*KiezboxMessage_Control_Mode
	//	*KiezboxMessage_Control_UnixTime
	//	*KiezboxMessage_Control_RouterPower
	//	*KiezboxMessage_Control_BoxId
	//	*KiezboxMessage_Control_DistId
	//	*KiezboxMessage_Control_SensId
	//	*KiezboxMessage_Control_StatusInterval
	Set isKiezboxMessage_Control_Set `protobuf_oneof:"set"`
}

func (x *KiezboxMessage_Control) Reset() {
	*x = KiezboxMessage_Control{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_Control) ProtoMessage() {}

func (x *KiezboxMessage_Control) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_Control.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_Control) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 2}
}

func (m *KiezboxMessage_Control) GetSet() isKiezboxMessage_Control_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (x *KiezboxMessage_Control) GetMode() KiezboxMessage_Mode {
	if x, ok := x.GetSet().(*KiezboxMessage_Control_Mode); ok {
		return x.Mode
	}
	return KiezboxMessage_maintenance
}

func (x *KiezboxMessage_Control) GetUnixTime() int64 {
	if x, ok := x.GetSet().(*KiezboxMessage_Control_UnixTime); ok {
		return x.UnixTime
	}
	return 0
}

func (x *KiezboxMessage_Control) GetRouterPower() bool {
	if x, ok := x.GetSet().(*KiezboxMessage_Control_RouterPower); ok {
		return x.RouterPower
	}
	return false
}

func (x *KiezboxMessage_Control) GetBoxId() uint32 {
	if x, ok := x.GetSet().(*KiezboxMessage_Control_BoxId); ok {
		return x.BoxId
	}
	return 0
}

func (x *KiezboxMessage_Control) GetDistId() uint32 {
	if x, ok := x.GetSet().(*KiezboxMessage_Control_DistId); ok {
		return x.DistId
	}
	return 0
}

func (x *KiezboxMessage_Control) GetSensId() uint32 {
	if x, ok := x.GetSet().(*KiezboxMessage_Control_SensId); ok {
		return x.SensId
	}
	return 0
}

func (x *KiezboxMessage_Control) GetStatusInterval() int32 {
	if x, ok := x.GetSet().(*KiezboxMessage_Control_StatusInterval); ok {
		return x.StatusInterval
	}
	return 0
}

type isKiezboxMessage_Control_Set interface {
	isKiezboxMessage_Control_Set()
}

type KiezboxMessage_Control_Mode struct {
	Mode KiezboxMessage_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=meshtastic.KiezboxMessage_Mode,oneof"`
}

type KiezboxMessage_Control_UnixTime struct {
	UnixTime int64 `protobuf:"varint,2,opt,name=unix_time,json=unixTime,proto3,oneof"`
}

type KiezboxMessage_Control_RouterPower struct {
	RouterPower bool `protobuf:"varint,3,opt,name=router_power,json=routerPower,proto3,oneof"`
}

type KiezboxMessage_Control_BoxId struct {
	BoxId uint32 `protobuf:"varint,4,opt,name=box_id,json=boxId,proto3,oneof"`
}

type KiezboxMessage_Control_DistId struct {
	DistId uint32 `protobuf:"varint,5,opt,name=dist_id,json=distId,proto3,oneof"`
}

type KiezboxMessage_Control_SensId struct {
	SensId uint32 `protobuf:"varint,6,opt,name=sens_id,json=sensId,proto3,oneof"`
}

type KiezboxMessage_Control_StatusInterval struct {
	StatusInterval int32 `protobuf:"varint,7,opt,name=status_interval,json=statusInterval,proto3,oneof"`
}

func (*KiezboxMessage_Control_Mode) isKiezboxMessage_Control_Set() {}

func (*KiezboxMessage_Control_UnixTime) isKiezboxMessage_Control_Set() {}

func (*KiezboxMessage_Control_RouterPower) isKiezboxMessage_Control_Set() {}

func (*KiezboxMessage_Control_BoxId) isKiezboxMessage_Control_Set() {}

func (*KiezboxMessage_Control_DistId) isKiezboxMessage_Control_Set() {}

func (*KiezboxMessage_Control_SensId) isKiezboxMessage_Control_Set() {}

func (*KiezboxMessage_Control_StatusInterval) isKiezboxMessage_Control_Set() {}

// Periodic update message containing optional core or sensor data
type KiezboxMessage_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *KiezboxMessage_Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Unix timestamp ( in seconds ), when the measurements were taken
	UnixTime int64                  `protobuf:"varint,2,opt,name=unix_time,json=unixTime,proto3" json:"unix_time,omitempty"`
	Core     *KiezboxMessage_Core   `protobuf:"bytes,3,opt,name=core,proto3,oneof" json:"core,omitempty"`
	Sensor   *KiezboxMessage_Sensor `protobuf:"bytes,4,opt,name=sensor,proto3,oneof" json:"sensor,omitempty"`
}

func (x *KiezboxMessage_Update) Reset() {
	*x = KiezboxMessage_Update{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_Update) ProtoMessage() {}

func (x *KiezboxMessage_Update) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_Update.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_Update) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 3}
}

func (x *KiezboxMessage_Update) GetMeta() *KiezboxMessage_Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *KiezboxMessage_Update) GetUnixTime() int64 {
	if x != nil {
		return x.UnixTime
	}
	return 0
}

func (x *KiezboxMessage_Update) GetCore() *KiezboxMessage_Core {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *KiezboxMessage_Update) GetSensor() *KiezboxMessage_Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

// Contains general router status and internal sensor values
type KiezboxMessage_Core struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode   KiezboxMessage_Mode        `protobuf:"varint,1,opt,name=mode,proto3,enum=meshtastic.KiezboxMessage_Mode" json:"mode,omitempty"`
	Router *KiezboxMessage_Router     `protobuf:"bytes,2,opt,name=router,proto3" json:"router,omitempty"`
	Values *KiezboxMessage_CoreValues `protobuf:"bytes,3,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *KiezboxMessage_Core) Reset() {
	*x = KiezboxMessage_Core{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_Core) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_Core) ProtoMessage() {}

func (x *KiezboxMessage_Core) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_Core.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_Core) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 4}
}

func (x *KiezboxMessage_Core) GetMode() KiezboxMessage_Mode {
	if x != nil {
		return x.Mode
	}
	return KiezboxMessage_maintenance
}

func (x *KiezboxMessage_Core) GetRouter() *KiezboxMessage_Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *KiezboxMessage_Core) GetValues() *KiezboxMessage_CoreValues {
	if x != nil {
		return x.Values
	}
	return nil
}

// Router status information
type KiezboxMessage_Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if power is supplied to the router
	Powered bool `protobuf:"varint,1,opt,name=powered,proto3" json:"powered,omitempty"`
	// Router firmware software version
	// For OpenWrt this would be VERSION="23.05.2"
	SwVersion *string `protobuf:"bytes,2,opt,name=sw_version,json=swVersion,proto3,oneof" json:"sw_version,omitempty"`
	// Router model name
	Model *string `protobuf:"bytes,3,opt,name=model,proto3,oneof" json:"model,omitempty"`
}

func (x *KiezboxMessage_Router) Reset() {
	*x = KiezboxMessage_Router{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_Router) ProtoMessage() {}

func (x *KiezboxMessage_Router) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_Router.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_Router) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 5}
}

func (x *KiezboxMessage_Router) GetPowered() bool {
	if x != nil {
		return x.Powered
	}
	return false
}

func (x *KiezboxMessage_Router) GetSwVersion() string {
	if x != nil && x.SwVersion != nil {
		return *x.SwVersion
	}
	return ""
}

func (x *KiezboxMessage_Router) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

// Sensor values measured at the core
type KiezboxMessage_CoreValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temperature outside (C)
	TempOut *int32 `protobuf:"varint,1,opt,name=temp_out,json=tempOut,proto3,oneof" json:"temp_out,omitempty"`
	// Temperature inside (C)
	TempIn *int32 `protobuf:"varint,2,opt,name=temp_in,json=tempIn,proto3,oneof" json:"temp_in,omitempty"`
	// Relative humidity inside (%)
	HumidIn *int32 `protobuf:"varint,3,opt,name=humid_in,json=humidIn,proto3,oneof" json:"humid_in,omitempty"`
	// Voltage of the solar panel (V)
	SolarVoltage *int32 `protobuf:"varint,4,opt,name=solar_voltage,json=solarVoltage,proto3,oneof" json:"solar_voltage,omitempty"`
	// Power output of the solar panel (W)
	SolarPower *int32 `protobuf:"varint,5,opt,name=solar_power,json=solarPower,proto3,oneof" json:"solar_power,omitempty"`
	// Energy collected by the solar panel today (Wh)
	SolarEnergyDay *int32 `protobuf:"varint,6,opt,name=solar_energy_day,json=solarEnergyDay,proto3,oneof" json:"solar_energy_day,omitempty"`
	// Energy collected by the solar panel in total (Wh)
	SolarEnergyTotal *int32 `protobuf:"varint,7,opt,name=solar_energy_total,json=solarEnergyTotal,proto3,oneof" json:"solar_energy_total,omitempty"`
	// Voltage of the (main) battery (V)
	BatteryVoltage *int32 `protobuf:"varint,8,opt,name=battery_voltage,json=batteryVoltage,proto3,oneof" json:"battery_voltage,omitempty"`
	// Current of the (main) battery (A)
	BatteryCurrent *int32 `protobuf:"varint,9,opt,name=battery_current,json=batteryCurrent,proto3,oneof" json:"battery_current,omitempty"`
	// Temperature of the realtime clock (C)
	TempRtc *int32 `protobuf:"varint,10,opt,name=temp_rtc,json=tempRtc,proto3,oneof" json:"temp_rtc,omitempty"`
}

func (x *KiezboxMessage_CoreValues) Reset() {
	*x = KiezboxMessage_CoreValues{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_CoreValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_CoreValues) ProtoMessage() {}

func (x *KiezboxMessage_CoreValues) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_CoreValues.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_CoreValues) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 6}
}

func (x *KiezboxMessage_CoreValues) GetTempOut() int32 {
	if x != nil && x.TempOut != nil {
		return *x.TempOut
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetTempIn() int32 {
	if x != nil && x.TempIn != nil {
		return *x.TempIn
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetHumidIn() int32 {
	if x != nil && x.HumidIn != nil {
		return *x.HumidIn
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetSolarVoltage() int32 {
	if x != nil && x.SolarVoltage != nil {
		return *x.SolarVoltage
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetSolarPower() int32 {
	if x != nil && x.SolarPower != nil {
		return *x.SolarPower
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetSolarEnergyDay() int32 {
	if x != nil && x.SolarEnergyDay != nil {
		return *x.SolarEnergyDay
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetSolarEnergyTotal() int32 {
	if x != nil && x.SolarEnergyTotal != nil {
		return *x.SolarEnergyTotal
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetBatteryVoltage() int32 {
	if x != nil && x.BatteryVoltage != nil {
		return *x.BatteryVoltage
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetBatteryCurrent() int32 {
	if x != nil && x.BatteryCurrent != nil {
		return *x.BatteryCurrent
	}
	return 0
}

func (x *KiezboxMessage_CoreValues) GetTempRtc() int32 {
	if x != nil && x.TempRtc != nil {
		return *x.TempRtc
	}
	return 0
}

// Contains a set of sensor values and a sensor id
type KiezboxMessage_Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values *KiezboxMessage_SensorValues `protobuf:"bytes,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *KiezboxMessage_Sensor) Reset() {
	*x = KiezboxMessage_Sensor{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_Sensor) ProtoMessage() {}

func (x *KiezboxMessage_Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_Sensor.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_Sensor) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 7}
}

func (x *KiezboxMessage_Sensor) GetValues() *KiezboxMessage_SensorValues {
	if x != nil {
		return x.Values
	}
	return nil
}

// Sensor values measured at the sensor module
type KiezboxMessage_SensorValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ BME Sensor ]
	// Temperature (C)
	TempMain *int32 `protobuf:"varint,1,opt,name=temp_main,json=tempMain,proto3,oneof" json:"temp_main,omitempty"`
	// Humidity (%)
	HumidMain *int32 `protobuf:"varint,2,opt,name=humid_main,json=humidMain,proto3,oneof" json:"humid_main,omitempty"`
	// Pressue (Pa)
	Pressure *int32 `protobuf:"varint,3,opt,name=pressure,proto3,oneof" json:"pressure,omitempty"`
	// Air Quality (??)
	AirQuality *int32 `protobuf:"varint,4,opt,name=air_quality,json=airQuality,proto3,oneof" json:"air_quality,omitempty"`
	// Particles
	// particles 1um (??)
	PartPm25 *int32 `protobuf:"varint,5,opt,name=part_pm25,json=partPm25,proto3,oneof" json:"part_pm25,omitempty"`
	// particles 2.5um (??)
	PartPm10 *int32 `protobuf:"varint,6,opt,name=part_pm10,json=partPm10,proto3,oneof" json:"part_pm10,omitempty"`
	// Noise (??)
	Noise *int32 `protobuf:"varint,7,opt,name=noise,proto3,oneof" json:"noise,omitempty"`
	// Temperature of the rtc (C)
	TempRtc *int32 `protobuf:"varint,8,opt,name=temp_rtc,json=tempRtc,proto3,oneof" json:"temp_rtc,omitempty"`
}

func (x *KiezboxMessage_SensorValues) Reset() {
	*x = KiezboxMessage_SensorValues{}
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxMessage_SensorValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxMessage_SensorValues) ProtoMessage() {}

func (x *KiezboxMessage_SensorValues) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_kiezbox_control_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxMessage_SensorValues.ProtoReflect.Descriptor instead.
func (*KiezboxMessage_SensorValues) Descriptor() ([]byte, []int) {
	return file_meshtastic_kiezbox_control_proto_rawDescGZIP(), []int{0, 8}
}

func (x *KiezboxMessage_SensorValues) GetTempMain() int32 {
	if x != nil && x.TempMain != nil {
		return *x.TempMain
	}
	return 0
}

func (x *KiezboxMessage_SensorValues) GetHumidMain() int32 {
	if x != nil && x.HumidMain != nil {
		return *x.HumidMain
	}
	return 0
}

func (x *KiezboxMessage_SensorValues) GetPressure() int32 {
	if x != nil && x.Pressure != nil {
		return *x.Pressure
	}
	return 0
}

func (x *KiezboxMessage_SensorValues) GetAirQuality() int32 {
	if x != nil && x.AirQuality != nil {
		return *x.AirQuality
	}
	return 0
}

func (x *KiezboxMessage_SensorValues) GetPartPm25() int32 {
	if x != nil && x.PartPm25 != nil {
		return *x.PartPm25
	}
	return 0
}

func (x *KiezboxMessage_SensorValues) GetPartPm10() int32 {
	if x != nil && x.PartPm10 != nil {
		return *x.PartPm10
	}
	return 0
}

func (x *KiezboxMessage_SensorValues) GetNoise() int32 {
	if x != nil && x.Noise != nil {
		return *x.Noise
	}
	return 0
}

func (x *KiezboxMessage_SensorValues) GetTempRtc() int32 {
	if x != nil && x.TempRtc != nil {
		return *x.TempRtc
	}
	return 0
}

var File_meshtastic_kiezbox_control_proto protoreflect.FileDescriptor

var file_meshtastic_kiezbox_control_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6b, 0x69, 0x65,
	0x7a, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x22, 0xc7,
	0x13, 0x0a, 0x0e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b,
	0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e,
	0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x88, 0x01, 0x01, 0x1a, 0xd5, 0x01, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x06, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x64, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x73,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x9d, 0x01, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x22,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x10, 0x00, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x85, 0x02, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x73,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x05, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x1a, 0xe8, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62,
	0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65,
	0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x01,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a,
	0xb5, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62,
	0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x7a, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x1a, 0xc1, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x07, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x49, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0e, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x10, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0e, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0e, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x72, 0x74, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x52, 0x74, 0x63, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x5f, 0x69, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x72, 0x74, 0x63, 0x1a, 0x49, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x12, 0x3f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b,
	0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x87, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x4d, 0x61,
	0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x68, 0x75, 0x6d,
	0x69, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x69,
	0x72, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x0a, 0x61, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6d, 0x32, 0x35, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x50, 0x6d, 0x32, 0x35, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6d, 0x31, 0x30, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x50, 0x6d, 0x31,
	0x30, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x05, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x72, 0x74, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x07, 0x52, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x52, 0x74, 0x63, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x69,
	0x72, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6d, 0x32, 0x35, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6d, 0x31, 0x30, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x72, 0x74, 0x63, 0x22, 0x32, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x02,
	0x22, 0x2f, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x10,
	0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x63, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x65, 0x65, 0x6b, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x42,
	0x0e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5a,
	0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x68,
	0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0xaa, 0x02, 0x14, 0x4d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0xba, 0x02, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meshtastic_kiezbox_control_proto_rawDescOnce sync.Once
	file_meshtastic_kiezbox_control_proto_rawDescData = file_meshtastic_kiezbox_control_proto_rawDesc
)

func file_meshtastic_kiezbox_control_proto_rawDescGZIP() []byte {
	file_meshtastic_kiezbox_control_proto_rawDescOnce.Do(func() {
		file_meshtastic_kiezbox_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_meshtastic_kiezbox_control_proto_rawDescData)
	})
	return file_meshtastic_kiezbox_control_proto_rawDescData
}

var file_meshtastic_kiezbox_control_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_meshtastic_kiezbox_control_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_meshtastic_kiezbox_control_proto_goTypes = []any{
	(KiezboxMessage_Mode)(0),            // 0: meshtastic.KiezboxMessage.Mode
	(KiezboxMessage_DeviceType)(0),      // 1: meshtastic.KiezboxMessage.DeviceType
	(KiezboxMessage_Request_Type)(0),    // 2: meshtastic.KiezboxMessage.Request.Type
	(*KiezboxMessage)(nil),              // 3: meshtastic.KiezboxMessage
	(*KiezboxMessage_Meta)(nil),         // 4: meshtastic.KiezboxMessage.Meta
	(*KiezboxMessage_Request)(nil),      // 5: meshtastic.KiezboxMessage.Request
	(*KiezboxMessage_Control)(nil),      // 6: meshtastic.KiezboxMessage.Control
	(*KiezboxMessage_Update)(nil),       // 7: meshtastic.KiezboxMessage.Update
	(*KiezboxMessage_Core)(nil),         // 8: meshtastic.KiezboxMessage.Core
	(*KiezboxMessage_Router)(nil),       // 9: meshtastic.KiezboxMessage.Router
	(*KiezboxMessage_CoreValues)(nil),   // 10: meshtastic.KiezboxMessage.CoreValues
	(*KiezboxMessage_Sensor)(nil),       // 11: meshtastic.KiezboxMessage.Sensor
	(*KiezboxMessage_SensorValues)(nil), // 12: meshtastic.KiezboxMessage.SensorValues
}
var file_meshtastic_kiezbox_control_proto_depIdxs = []int32{
	7,  // 0: meshtastic.KiezboxMessage.update:type_name -> meshtastic.KiezboxMessage.Update
	6,  // 1: meshtastic.KiezboxMessage.control:type_name -> meshtastic.KiezboxMessage.Control
	1,  // 2: meshtastic.KiezboxMessage.Meta.dev_type:type_name -> meshtastic.KiezboxMessage.DeviceType
	4,  // 3: meshtastic.KiezboxMessage.Request.meta:type_name -> meshtastic.KiezboxMessage.Meta
	2,  // 4: meshtastic.KiezboxMessage.Request.type:type_name -> meshtastic.KiezboxMessage.Request.Type
	0,  // 5: meshtastic.KiezboxMessage.Control.mode:type_name -> meshtastic.KiezboxMessage.Mode
	4,  // 6: meshtastic.KiezboxMessage.Update.meta:type_name -> meshtastic.KiezboxMessage.Meta
	8,  // 7: meshtastic.KiezboxMessage.Update.core:type_name -> meshtastic.KiezboxMessage.Core
	11, // 8: meshtastic.KiezboxMessage.Update.sensor:type_name -> meshtastic.KiezboxMessage.Sensor
	0,  // 9: meshtastic.KiezboxMessage.Core.mode:type_name -> meshtastic.KiezboxMessage.Mode
	9,  // 10: meshtastic.KiezboxMessage.Core.router:type_name -> meshtastic.KiezboxMessage.Router
	10, // 11: meshtastic.KiezboxMessage.Core.values:type_name -> meshtastic.KiezboxMessage.CoreValues
	12, // 12: meshtastic.KiezboxMessage.Sensor.values:type_name -> meshtastic.KiezboxMessage.SensorValues
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_meshtastic_kiezbox_control_proto_init() }
func file_meshtastic_kiezbox_control_proto_init() {
	if File_meshtastic_kiezbox_control_proto != nil {
		return
	}
	file_meshtastic_kiezbox_control_proto_msgTypes[0].OneofWrappers = []any{}
	file_meshtastic_kiezbox_control_proto_msgTypes[1].OneofWrappers = []any{}
	file_meshtastic_kiezbox_control_proto_msgTypes[2].OneofWrappers = []any{}
	file_meshtastic_kiezbox_control_proto_msgTypes[3].OneofWrappers = []any{
		(*KiezboxMessage_Control_Mode)(nil),
		(*KiezboxMessage_Control_UnixTime)(nil),
		(*KiezboxMessage_Control_RouterPower)(nil),
		(*KiezboxMessage_Control_BoxId)(nil),
		(*KiezboxMessage_Control_DistId)(nil),
		(*KiezboxMessage_Control_SensId)(nil),
		(*KiezboxMessage_Control_StatusInterval)(nil),
	}
	file_meshtastic_kiezbox_control_proto_msgTypes[4].OneofWrappers = []any{}
	file_meshtastic_kiezbox_control_proto_msgTypes[6].OneofWrappers = []any{}
	file_meshtastic_kiezbox_control_proto_msgTypes[7].OneofWrappers = []any{}
	file_meshtastic_kiezbox_control_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meshtastic_kiezbox_control_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_kiezbox_control_proto_goTypes,
		DependencyIndexes: file_meshtastic_kiezbox_control_proto_depIdxs,
		EnumInfos:         file_meshtastic_kiezbox_control_proto_enumTypes,
		MessageInfos:      file_meshtastic_kiezbox_control_proto_msgTypes,
	}.Build()
	File_meshtastic_kiezbox_control_proto = out.File
	file_meshtastic_kiezbox_control_proto_rawDesc = nil
	file_meshtastic_kiezbox_control_proto_goTypes = nil
	file_meshtastic_kiezbox_control_proto_depIdxs = nil
}
