// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: internal/marshal/status.proto

package marshal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This message is used for
// KIEZBOX_CONTROL_APP PortNums.
type KiezboxStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A kiezbox is identified by its box ID and district ID
	BoxId  uint32 `protobuf:"varint,1,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`    // only 8 bit used
	DistId uint32 `protobuf:"varint,2,opt,name=dist_id,json=distId,proto3" json:"dist_id,omitempty"` // only 8 bit used
	// The current power state of the connected WiFi router
	RouterPowered bool `protobuf:"varint,3,opt,name=router_powered,json=routerPowered,proto3" json:"router_powered,omitempty"`
	// Unix timestamp ( in seconds ), when the measurement was taken
	UnixTime int64 `protobuf:"varint,4,opt,name=unix_time,json=unixTime,proto3" json:"unix_time,omitempty"`
	// Temperature outside (but close) to the kiezbox ( in milli Celsius / m°C )
	TemperatureOut int32 `protobuf:"varint,5,opt,name=temperature_out,json=temperatureOut,proto3" json:"temperature_out,omitempty"`
	// Temperature inside the kiezbox ( in milli Celsius / m°C )
	TemperatureIn int32 `protobuf:"varint,6,opt,name=temperature_in,json=temperatureIn,proto3" json:"temperature_in,omitempty"`
	// Relative humidity inside the kiezbox ( as milli Percentage / m% )
	HumidityIn int32 `protobuf:"varint,7,opt,name=humidity_in,json=humidityIn,proto3" json:"humidity_in,omitempty"`
	// Voltage of the solar panel ( in milli Volt / mV )
	SolarVoltage int32 `protobuf:"varint,8,opt,name=solar_voltage,json=solarVoltage,proto3" json:"solar_voltage,omitempty"`
	// Power output of the solar panel ( in Watt / W )
	SolarPower int32 `protobuf:"varint,9,opt,name=solar_power,json=solarPower,proto3" json:"solar_power,omitempty"`
	// Energy collected by the solar panel today ( in Watt/100 / dW )
	SolarEnergyDay int32 `protobuf:"varint,10,opt,name=solar_energy_day,json=solarEnergyDay,proto3" json:"solar_energy_day,omitempty"`
	// Energy collected by the solar panel in total ( in Watt/100 / dW )
	SolarEnergyTotal int32 `protobuf:"varint,11,opt,name=solar_energy_total,json=solarEnergyTotal,proto3" json:"solar_energy_total,omitempty"`
	// Voltage of the (main) battery ( in milli Volt / mV )
	BatteryVoltage int32 `protobuf:"varint,12,opt,name=battery_voltage,json=batteryVoltage,proto3" json:"battery_voltage,omitempty"`
	// Current of the (main) battery ( in milli Amps / mA )
	BatteryCurrent int32 `protobuf:"varint,13,opt,name=battery_current,json=batteryCurrent,proto3" json:"battery_current,omitempty"`
	// Temperature of the Real-time clock used in the kiezbox ( in milli Celsius / m°C )
	TemperatureRtc int32 `protobuf:"varint,14,opt,name=temperature_rtc,json=temperatureRtc,proto3" json:"temperature_rtc,omitempty"`
}

func (x *KiezboxStatus) Reset() {
	*x = KiezboxStatus{}
	mi := &file_internal_marshal_status_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KiezboxStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KiezboxStatus) ProtoMessage() {}

func (x *KiezboxStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_marshal_status_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KiezboxStatus.ProtoReflect.Descriptor instead.
func (*KiezboxStatus) Descriptor() ([]byte, []int) {
	return file_internal_marshal_status_proto_rawDescGZIP(), []int{0}
}

func (x *KiezboxStatus) GetBoxId() uint32 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *KiezboxStatus) GetDistId() uint32 {
	if x != nil {
		return x.DistId
	}
	return 0
}

func (x *KiezboxStatus) GetRouterPowered() bool {
	if x != nil {
		return x.RouterPowered
	}
	return false
}

func (x *KiezboxStatus) GetUnixTime() int64 {
	if x != nil {
		return x.UnixTime
	}
	return 0
}

func (x *KiezboxStatus) GetTemperatureOut() int32 {
	if x != nil {
		return x.TemperatureOut
	}
	return 0
}

func (x *KiezboxStatus) GetTemperatureIn() int32 {
	if x != nil {
		return x.TemperatureIn
	}
	return 0
}

func (x *KiezboxStatus) GetHumidityIn() int32 {
	if x != nil {
		return x.HumidityIn
	}
	return 0
}

func (x *KiezboxStatus) GetSolarVoltage() int32 {
	if x != nil {
		return x.SolarVoltage
	}
	return 0
}

func (x *KiezboxStatus) GetSolarPower() int32 {
	if x != nil {
		return x.SolarPower
	}
	return 0
}

func (x *KiezboxStatus) GetSolarEnergyDay() int32 {
	if x != nil {
		return x.SolarEnergyDay
	}
	return 0
}

func (x *KiezboxStatus) GetSolarEnergyTotal() int32 {
	if x != nil {
		return x.SolarEnergyTotal
	}
	return 0
}

func (x *KiezboxStatus) GetBatteryVoltage() int32 {
	if x != nil {
		return x.BatteryVoltage
	}
	return 0
}

func (x *KiezboxStatus) GetBatteryCurrent() int32 {
	if x != nil {
		return x.BatteryCurrent
	}
	return 0
}

func (x *KiezboxStatus) GetTemperatureRtc() int32 {
	if x != nil {
		return x.TemperatureRtc
	}
	return 0
}

// Request message for getting the Kiezbox status
type GetKiezboxStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId  uint32 `protobuf:"varint,1,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	DistId uint32 `protobuf:"varint,2,opt,name=dist_id,json=distId,proto3" json:"dist_id,omitempty"`
}

func (x *GetKiezboxStatusRequest) Reset() {
	*x = GetKiezboxStatusRequest{}
	mi := &file_internal_marshal_status_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKiezboxStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKiezboxStatusRequest) ProtoMessage() {}

func (x *GetKiezboxStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_marshal_status_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKiezboxStatusRequest.ProtoReflect.Descriptor instead.
func (*GetKiezboxStatusRequest) Descriptor() ([]byte, []int) {
	return file_internal_marshal_status_proto_rawDescGZIP(), []int{1}
}

func (x *GetKiezboxStatusRequest) GetBoxId() uint32 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *GetKiezboxStatusRequest) GetDistId() uint32 {
	if x != nil {
		return x.DistId
	}
	return 0
}

// Response message for getting the Kiezbox status
type GetKiezboxStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *KiezboxStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetKiezboxStatusResponse) Reset() {
	*x = GetKiezboxStatusResponse{}
	mi := &file_internal_marshal_status_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKiezboxStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKiezboxStatusResponse) ProtoMessage() {}

func (x *GetKiezboxStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_marshal_status_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKiezboxStatusResponse.ProtoReflect.Descriptor instead.
func (*GetKiezboxStatusResponse) Descriptor() ([]byte, []int) {
	return file_internal_marshal_status_proto_rawDescGZIP(), []int{2}
}

func (x *GetKiezboxStatusResponse) GetStatus() *KiezboxStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_internal_marshal_status_proto protoreflect.FileDescriptor

var file_internal_marshal_status_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x22, 0x8d, 0x04, 0x0a, 0x0d,
	0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62,
	0x6f, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44,
	0x61, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x74, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x74, 0x63, 0x22, 0x49, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x65,
	0x7a, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e,
	0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x6f, 0x0a, 0x0e, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x69,
	0x65, 0x7a, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x65, 0x7a,
	0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x69, 0x65, 0x7a, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x6b, 0x69, 0x65, 0x7a, 0x62, 0x6f,
	0x78, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_marshal_status_proto_rawDescOnce sync.Once
	file_internal_marshal_status_proto_rawDescData = file_internal_marshal_status_proto_rawDesc
)

func file_internal_marshal_status_proto_rawDescGZIP() []byte {
	file_internal_marshal_status_proto_rawDescOnce.Do(func() {
		file_internal_marshal_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_marshal_status_proto_rawDescData)
	})
	return file_internal_marshal_status_proto_rawDescData
}

var file_internal_marshal_status_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_internal_marshal_status_proto_goTypes = []any{
	(*KiezboxStatus)(nil),            // 0: meshtastic.KiezboxStatus
	(*GetKiezboxStatusRequest)(nil),  // 1: meshtastic.GetKiezboxStatusRequest
	(*GetKiezboxStatusResponse)(nil), // 2: meshtastic.GetKiezboxStatusResponse
}
var file_internal_marshal_status_proto_depIdxs = []int32{
	0, // 0: meshtastic.GetKiezboxStatusResponse.status:type_name -> meshtastic.KiezboxStatus
	1, // 1: meshtastic.KiezboxService.GetKiezboxStatus:input_type -> meshtastic.GetKiezboxStatusRequest
	2, // 2: meshtastic.KiezboxService.GetKiezboxStatus:output_type -> meshtastic.GetKiezboxStatusResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_internal_marshal_status_proto_init() }
func file_internal_marshal_status_proto_init() {
	if File_internal_marshal_status_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_marshal_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_marshal_status_proto_goTypes,
		DependencyIndexes: file_internal_marshal_status_proto_depIdxs,
		MessageInfos:      file_internal_marshal_status_proto_msgTypes,
	}.Build()
	File_internal_marshal_status_proto = out.File
	file_internal_marshal_status_proto_rawDesc = nil
	file_internal_marshal_status_proto_goTypes = nil
	file_internal_marshal_status_proto_depIdxs = nil
}
